
BrushlessESC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  0000087a  0000090e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000087a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004b  00800126  00800126  00000934  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000934  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000248  00000000  00000000  00000964  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000016b9  00000000  00000000  00000bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009d0  00000000  00000000  00002265  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000be6  00000000  00000000  00002c35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000054c  00000000  00000000  0000381c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000d54  00000000  00000000  00003d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c4b  00000000  00000000  00004abc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b8  00000000  00000000  00005707  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	filterData.filterPos %= filterData.filterLen;
	filterData.filterContent[filterData.filterPos] = value;
}

uint16_t MAVG_GetResult(MAVG_FilterData_t filterData)
{
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
	uint8_t ctr;
	uint32_t result;
	
	for (ctr = 0; ctr < filterData.filterLen; ctr++)
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
	{
		/* Kein Ueberlauf möglich (255 * uint16_max < uint32_max) */
		result += filterData.filterContent[ctr];
  14:	7a c0       	rjmp	.+244    	; 0x10a <__vector_10>
  16:	1e c2       	rjmp	.+1084   	; 0x454 <__vector_11>
  18:	57 c3       	rjmp	.+1710   	; 0x6c8 <__vector_12>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
uint16_t MAVG_GetResult(MAVG_FilterData_t filterData)
{
	uint8_t ctr;
	uint32_t result;
	
	for (ctr = 0; ctr < filterData.filterLen; ctr++)
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	de c0       	rjmp	.+444    	; 0x1e0 <__vector_17>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
	{
		/* Kein Ueberlauf möglich (255 * uint16_max < uint32_max) */
		result += filterData.filterContent[ctr];
	}
	
	result /= filterData.filterLen;
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	53 c0       	rjmp	.+166    	; 0xd2 <__vector_21>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	a5 c3       	rjmp	.+1866   	; 0x77a <__vector_23>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ea e7       	ldi	r30, 0x7A	; 122
	{
		result = UINT16_MAX;
	}
	
	return (uint16_t)result;
}
  48:	f8 e0       	ldi	r31, 0x08	; 8
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a6 32       	cpi	r26, 0x26	; 38
  52:	b1 07       	cpc	r27, r17
  else{
    p_term = pid_st->P_Factor * error;
  }

  // Calculate Iterm and limit integral runaway
  temp = pid_st->sumError + error;
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	a6 e2       	ldi	r26, 0x26	; 38
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  if(temp > pid_st->maxSumError){
  60:	a1 37       	cpi	r26, 0x71	; 113
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	40 d1       	rcall	.+640    	; 0x2e8 <main>
  68:	06 c4       	rjmp	.+2060   	; 0x876 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <ACP_Init>:
  6c:	81 e0       	ldi	r24, 0x01	; 1
  6e:	80 93 7f 00 	sts	0x007F, r24
    i_term = MAX_I_TERM;
    pid_st->sumError = pid_st->maxSumError;
  72:	80 e4       	ldi	r24, 0x40	; 64
  74:	80 93 7b 00 	sts	0x007B, r24
  78:	8a e9       	ldi	r24, 0x9A	; 154
  }

  // Calculate Iterm and limit integral runaway
  temp = pid_st->sumError + error;
  if(temp > pid_st->maxSumError){
    i_term = MAX_I_TERM;
  7a:	80 bf       	out	0x30, r24	; 48
  7c:	08 95       	ret

0000007e <ACP_Enable>:
  7e:	80 b7       	in	r24, 0x30	; 48
  80:	8f 77       	andi	r24, 0x7F	; 127
  82:	80 bf       	out	0x30, r24	; 48
    pid_st->sumError = pid_st->maxSumError;
  }
  else if(temp < -pid_st->maxSumError){
  84:	08 95       	ret

00000086 <ACP_Disable>:
  86:	80 b7       	in	r24, 0x30	; 48
  88:	80 68       	ori	r24, 0x80	; 128
  8a:	80 bf       	out	0x30, r24	; 48
  8c:	08 95       	ret

0000008e <ACP_SelectInput>:
  8e:	00 b6       	in	r0, 0x30	; 48
  90:	07 fe       	sbrs	r0, 7
  92:	06 c0       	rjmp	.+12     	; 0xa0 <ACP_SelectInput+0x12>
  94:	ec e7       	ldi	r30, 0x7C	; 124
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	90 81       	ld	r25, Z
  9a:	90 7e       	andi	r25, 0xE0	; 224
    i_term = -MAX_I_TERM;
    pid_st->sumError = -pid_st->maxSumError;
  9c:	89 2b       	or	r24, r25
  9e:	80 83       	st	Z, r24
  a0:	08 95       	ret

000000a2 <ADC_Init>:
  a2:	89 e0       	ldi	r24, 0x09	; 9
  if(temp > pid_st->maxSumError){
    i_term = MAX_I_TERM;
    pid_st->sumError = pid_st->maxSumError;
  }
  else if(temp < -pid_st->maxSumError){
    i_term = -MAX_I_TERM;
  a4:	80 93 7a 00 	sts	0x007A, r24
  a8:	10 92 7b 00 	sts	0x007B, r1
  ac:	81 e0       	ldi	r24, 0x01	; 1
    pid_st->sumError = -pid_st->maxSumError;
  }
  else{
    pid_st->sumError = temp;
  ae:	80 93 7e 00 	sts	0x007E, r24
  b2:	80 e4       	ldi	r24, 0x40	; 64
  b4:	80 93 7c 00 	sts	0x007C, r24
    i_term = pid_st->I_Factor * pid_st->sumError;
  b8:	08 95       	ret

000000ba <ADC_Enable>:
  ba:	ea e7       	ldi	r30, 0x7A	; 122
  }

  // Calculate Dterm
  d_term = pid_st->D_Factor * (pid_st->lastProcessValue - processValue);
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	80 68       	ori	r24, 0x80	; 128
  c2:	80 83       	st	Z, r24
  c4:	08 95       	ret

000000c6 <ADC_Disable>:
  c6:	ea e7       	ldi	r30, 0x7A	; 122
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	8f 77       	andi	r24, 0x7F	; 127
  ce:	80 83       	st	Z, r24
  d0:	08 95       	ret

000000d2 <__vector_21>:
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0

  pid_st->lastProcessValue = processValue;
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0

  ret = (p_term + i_term + d_term) / SCALING_FACTOR;
  da:	11 24       	eor	r1, r1
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <ICP_Init>:
  e6:	10 92 6f 00 	sts	0x006F, r1
  ea:	10 92 80 00 	sts	0x0080, r1
  ee:	10 92 82 00 	sts	0x0082, r1
  f2:	82 ec       	ldi	r24, 0xC2	; 194
  f4:	80 93 81 00 	sts	0x0081, r24
  f8:	20 98       	cbi	0x04, 0	; 4
  fa:	08 95       	ret

000000fc <ICP_Start>:
  fc:	b5 9a       	sbi	0x16, 5	; 22
  fe:	ef e6       	ldi	r30, 0x6F	; 111
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	80 62       	ori	r24, 0x20	; 32
 106:	80 83       	st	Z, r24
 108:	08 95       	ret

0000010a <__vector_10>:
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	2f 93       	push	r18
 116:	3f 93       	push	r19
 118:	4f 93       	push	r20
 11a:	6f 93       	push	r22
 11c:	7f 93       	push	r23
 11e:	8f 93       	push	r24
 120:	9f 93       	push	r25
 122:	ef 93       	push	r30
 124:	ff 93       	push	r31
 126:	4f b7       	in	r20, 0x3f	; 63
 128:	f8 94       	cli
 12a:	80 91 86 00 	lds	r24, 0x0086
 12e:	90 91 87 00 	lds	r25, 0x0087
 132:	e1 e8       	ldi	r30, 0x81	; 129
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	30 81       	ld	r19, Z
 138:	20 e4       	ldi	r18, 0x40	; 64
 13a:	23 27       	eor	r18, r19
 13c:	20 83       	st	Z, r18
 13e:	b5 9a       	sbi	0x16, 5	; 22
 140:	20 91 26 01 	lds	r18, 0x0126
 144:	30 91 27 01 	lds	r19, 0x0127
  else if(ret < -MAX_INT){
    ret = -MAX_INT;
  }

  return((int16_t)ret);
}
 148:	bc 01       	movw	r22, r24
 14a:	62 1b       	sub	r22, r18
 14c:	73 0b       	sbc	r23, r19
 14e:	70 93 29 01 	sts	0x0129, r23
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		tmpVal = ICR1;
		TCCR1B ^= _BV(ICES1);
		TIFR1 |= _BV(ICF1);
		icp_currentDuty = tmpVal - icp_tmpCtrVal;
 152:	60 93 28 01 	sts	0x0128, r22
		icp_tmpCtrVal = tmpVal;
 156:	90 93 27 01 	sts	0x0127, r25
 15a:	80 93 26 01 	sts	0x0126, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 15e:	4f bf       	out	0x3f, r20	; 63
	}
 160:	ff 91       	pop	r31
 162:	ef 91       	pop	r30
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	7f 91       	pop	r23
 16a:	6f 91       	pop	r22
 16c:	4f 91       	pop	r20
 16e:	3f 91       	pop	r19
 170:	2f 91       	pop	r18
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <PWM_Init>:
	
	Phase correct PWM
	
	No prescaler
	*/
	OCR2A = 0;
 17c:	10 92 b3 00 	sts	0x00B3, r1
	TCNT2 = 0;
 180:	10 92 b2 00 	sts	0x00B2, r1
	TCCR2A = _BV(COM2B1)|_BV(WGM20);
 184:	81 e2       	ldi	r24, 0x21	; 33
 186:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = _BV(WGM22);
 18a:	88 e0       	ldi	r24, 0x08	; 8
 18c:	80 93 b1 00 	sts	0x00B1, r24
	
	/* OC2B als Ausgang */
	OC2B_DDR |= _BV(OC2B_BIT);
 190:	53 9a       	sbi	0x0a, 3	; 10
 192:	08 95       	ret

00000194 <PWM_Start>:
	TCCR2B &= ~_BV(CS20)|_BV(CS21)|_BV(CS22);
}

void PWM_Start(PWM_Prescaler_t prescaler)
{
	TCCR2B &= ~_BV(CS20)|_BV(CS21)|_BV(CS22);
 194:	e1 eb       	ldi	r30, 0xB1	; 177
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	90 81       	ld	r25, Z
 19a:	9e 7f       	andi	r25, 0xFE	; 254
 19c:	90 83       	st	Z, r25
	TCCR2B |= prescaler;
 19e:	90 81       	ld	r25, Z
 1a0:	89 2b       	or	r24, r25
 1a2:	80 83       	st	Z, r24
 1a4:	08 95       	ret

000001a6 <PWM_SetValue>:
	TCCR2A = _BV(COM2B0)|_BV(COM2B1)|_BV(WGM20)|_BV(WGM21);
}

void PWM_SetValue(uint8_t value)
{
	OCR2A = value;
 1a6:	80 93 b3 00 	sts	0x00B3, r24
 1aa:	08 95       	ret

000001ac <SPI_SlaveInit>:
/* -----------------------------------------------------
 * --               Public functions                  --
 * ----------------------------------------------------- */
void SPI_SlaveInit(void)
{
	SPCR = _BV(SPIE)|_BV(SPE);
 1ac:	80 ec       	ldi	r24, 0xC0	; 192
 1ae:	8c bd       	out	0x2c, r24	; 44
 1b0:	08 95       	ret

000001b2 <spi_GetCmdIndex>:
}
/* -----------------------------------------------------
 * --               Private functions                  --
 * ----------------------------------------------------- */
uint8_t spi_GetCmdIndex(uint8_t cmd)
{
 1b2:	48 2f       	mov	r20, r24
	uint8_t ctr;
	while ((spi_Config[ctr].cmd != cmd) && (ctr < SPI_NUM_CMDS))
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	90 91 44 01 	lds	r25, 0x0144
 1ba:	94 17       	cp	r25, r20
 1bc:	81 f0       	breq	.+32     	; 0x1de <spi_GetCmdIndex+0x2c>
	{
		ctr++;
 1be:	8f 5f       	subi	r24, 0xFF	; 255
 * --               Private functions                  --
 * ----------------------------------------------------- */
uint8_t spi_GetCmdIndex(uint8_t cmd)
{
	uint8_t ctr;
	while ((spi_Config[ctr].cmd != cmd) && (ctr < SPI_NUM_CMDS))
 1c0:	28 2f       	mov	r18, r24
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	f9 01       	movw	r30, r18
 1c6:	ee 0f       	add	r30, r30
 1c8:	ff 1f       	adc	r31, r31
 1ca:	2e 0f       	add	r18, r30
 1cc:	3f 1f       	adc	r19, r31
 1ce:	f9 01       	movw	r30, r18
 1d0:	ec 5b       	subi	r30, 0xBC	; 188
 1d2:	fe 4f       	sbci	r31, 0xFE	; 254
 1d4:	90 81       	ld	r25, Z
 1d6:	94 17       	cp	r25, r20
 1d8:	11 f0       	breq	.+4      	; 0x1de <spi_GetCmdIndex+0x2c>
 1da:	8f 30       	cpi	r24, 0x0F	; 15
 1dc:	81 f7       	brne	.-32     	; 0x1be <spi_GetCmdIndex+0xc>
	{
		ctr++;
	}
	
	return ctr;
}
 1de:	08 95       	ret

000001e0 <__vector_17>:

ISR(SPI_STC_vect)
{
 1e0:	1f 92       	push	r1
 1e2:	0f 92       	push	r0
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	0f 92       	push	r0
 1e8:	11 24       	eor	r1, r1
 1ea:	2f 93       	push	r18
 1ec:	3f 93       	push	r19
 1ee:	4f 93       	push	r20
 1f0:	5f 93       	push	r21
 1f2:	6f 93       	push	r22
 1f4:	7f 93       	push	r23
 1f6:	8f 93       	push	r24
 1f8:	9f 93       	push	r25
 1fa:	af 93       	push	r26
 1fc:	bf 93       	push	r27
 1fe:	ef 93       	push	r30
 200:	ff 93       	push	r31
	uint8_t cmdIndex;
	if (false == spi_CmdActive)
 202:	80 91 3a 01 	lds	r24, 0x013A
 206:	81 11       	cpse	r24, r1
 208:	1c c0       	rjmp	.+56     	; 0x242 <__vector_17+0x62>
	{
		spi_RecvCmd = SPDR;
 20a:	8e b5       	in	r24, 0x2e	; 46
 20c:	80 93 39 01 	sts	0x0139, r24
		cmdIndex = spi_GetCmdIndex(spi_RecvCmd);
 210:	80 91 39 01 	lds	r24, 0x0139
 214:	ce df       	rcall	.-100    	; 0x1b2 <spi_GetCmdIndex>
		if (cmdIndex != SPI_NUM_CMDS)
 216:	8f 30       	cpi	r24, 0x0F	; 15
 218:	09 f4       	brne	.+2      	; 0x21c <__vector_17+0x3c>
 21a:	55 c0       	rjmp	.+170    	; 0x2c6 <__vector_17+0xe6>
		{
			spi_CmdActive = true;
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	90 93 3a 01 	sts	0x013A, r25
			if (spi_Config[cmdIndex].paramLen != 0)
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	fc 01       	movw	r30, r24
 226:	ee 0f       	add	r30, r30
 228:	ff 1f       	adc	r31, r31
 22a:	8e 0f       	add	r24, r30
 22c:	9f 1f       	adc	r25, r31
 22e:	fc 01       	movw	r30, r24
 230:	ec 5b       	subi	r30, 0xBC	; 188
 232:	fe 4f       	sbci	r31, 0xFE	; 254
 234:	81 81       	ldd	r24, Z+1	; 0x01
 236:	88 23       	and	r24, r24
 238:	09 f4       	brne	.+2      	; 0x23c <__vector_17+0x5c>
 23a:	45 c0       	rjmp	.+138    	; 0x2c6 <__vector_17+0xe6>
			{
				spi_RecvBufferPos = 0;
 23c:	10 92 38 01 	sts	0x0138, r1
 240:	42 c0       	rjmp	.+132    	; 0x2c6 <__vector_17+0xe6>
			}
		}
	}
	else
	{
		if (spi_RecvBufferPos < spi_Config[cmdIndex].paramLen)
 242:	40 91 45 01 	lds	r20, 0x0145
 246:	80 91 38 01 	lds	r24, 0x0138
 24a:	84 17       	cp	r24, r20
 24c:	e8 f4       	brcc	.+58     	; 0x288 <__vector_17+0xa8>
		{
			spi_RecvBuffer[spi_RecvBufferPos] = SPDR;
 24e:	e0 91 38 01 	lds	r30, 0x0138
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	8e b5       	in	r24, 0x2e	; 46
 256:	e2 5d       	subi	r30, 0xD2	; 210
 258:	fe 4f       	sbci	r31, 0xFE	; 254
 25a:	80 83       	st	Z, r24
			spi_RecvBufferPos++;
 25c:	80 91 38 01 	lds	r24, 0x0138
 260:	8f 5f       	subi	r24, 0xFF	; 255
 262:	80 93 38 01 	sts	0x0138, r24
			
			if (spi_RecvBufferPos == spi_Config[cmdIndex].paramLen)
 266:	80 91 38 01 	lds	r24, 0x0138
 26a:	48 13       	cpse	r20, r24
 26c:	2c c0       	rjmp	.+88     	; 0x2c6 <__vector_17+0xe6>
			{
				if (false == SPI_Cmd_Callback(spi_RecvCmd, spi_RecvBuffer, spi_Config[cmdIndex].paramLen))
 26e:	80 91 39 01 	lds	r24, 0x0139
 272:	6e e2       	ldi	r22, 0x2E	; 46
 274:	71 e0       	ldi	r23, 0x01	; 1
 276:	ed d0       	rcall	.+474    	; 0x452 <SPI_Cmd_Callback>
 278:	81 11       	cpse	r24, r1
 27a:	03 c0       	rjmp	.+6      	; 0x282 <__vector_17+0xa2>
				{
					spi_CmdActive = false;
 27c:	10 92 3a 01 	sts	0x013A, r1
 280:	22 c0       	rjmp	.+68     	; 0x2c6 <__vector_17+0xe6>
				}
				else
				{
					spi_SendBufferPos = 0;
 282:	10 92 2d 01 	sts	0x012D, r1
 286:	1f c0       	rjmp	.+62     	; 0x2c6 <__vector_17+0xe6>
				}
			}
		}
		else
		{
			if (spi_SendBufferPos < spi_SendBufferLen)
 288:	90 91 2d 01 	lds	r25, 0x012D
 28c:	80 91 2c 01 	lds	r24, 0x012C
 290:	98 17       	cp	r25, r24
 292:	c0 f4       	brcc	.+48     	; 0x2c4 <__vector_17+0xe4>
			{
				SPDR = spi_SendBuffer[spi_SendBufferPos];
 294:	80 91 2d 01 	lds	r24, 0x012D
 298:	e0 91 2a 01 	lds	r30, 0x012A
 29c:	f0 91 2b 01 	lds	r31, 0x012B
 2a0:	e8 0f       	add	r30, r24
 2a2:	f1 1d       	adc	r31, r1
 2a4:	80 81       	ld	r24, Z
 2a6:	8e bd       	out	0x2e, r24	; 46
				spi_SendBufferPos++;
 2a8:	80 91 2d 01 	lds	r24, 0x012D
 2ac:	8f 5f       	subi	r24, 0xFF	; 255
 2ae:	80 93 2d 01 	sts	0x012D, r24
				
				if (spi_SendBufferPos == spi_SendBufferLen)
 2b2:	90 91 2d 01 	lds	r25, 0x012D
 2b6:	80 91 2c 01 	lds	r24, 0x012C
 2ba:	98 13       	cpse	r25, r24
 2bc:	04 c0       	rjmp	.+8      	; 0x2c6 <__vector_17+0xe6>
				{
					spi_CmdActive = false;
 2be:	10 92 3a 01 	sts	0x013A, r1
 2c2:	01 c0       	rjmp	.+2      	; 0x2c6 <__vector_17+0xe6>
				}
			}
			else
			{
				SPDR = 0;
 2c4:	1e bc       	out	0x2e, r1	; 46
			}
		}
	}
}
 2c6:	ff 91       	pop	r31
 2c8:	ef 91       	pop	r30
 2ca:	bf 91       	pop	r27
 2cc:	af 91       	pop	r26
 2ce:	9f 91       	pop	r25
 2d0:	8f 91       	pop	r24
 2d2:	7f 91       	pop	r23
 2d4:	6f 91       	pop	r22
 2d6:	5f 91       	pop	r21
 2d8:	4f 91       	pop	r20
 2da:	3f 91       	pop	r19
 2dc:	2f 91       	pop	r18
 2de:	0f 90       	pop	r0
 2e0:	0f be       	out	0x3f, r0	; 63
 2e2:	0f 90       	pop	r0
 2e4:	1f 90       	pop	r1
 2e6:	18 95       	reti

000002e8 <main>:
/* -----------------------------------------------------
 * --               Public functions                  --
 * ----------------------------------------------------- */
void main(void)
{
	ACP_Init();
 2e8:	c1 de       	rcall	.-638    	; 0x6c <ACP_Init>
	ADC_Init();
 2ea:	db de       	rcall	.-586    	; 0xa2 <ADC_Init>
	ICP_Init();
 2ec:	fc de       	rcall	.-520    	; 0xe6 <ICP_Init>
	PWM_Init();
 2ee:	46 df       	rcall	.-372    	; 0x17c <PWM_Init>
	SPI_SlaveInit();
 2f0:	5d df       	rcall	.-326    	; 0x1ac <SPI_SlaveInit>
	BLDC_Init();
 2f2:	25 d0       	rcall	.+74     	; 0x33e <BLDC_Init>

	BLDC_Start();
 2f4:	2b d0       	rcall	.+86     	; 0x34c <BLDC_Start>

	do 
	{
		BLDC_StateMachine();
 2f6:	2e d0       	rcall	.+92     	; 0x354 <BLDC_StateMachine>
 2f8:	fe cf       	rjmp	.-4      	; 0x2f6 <main+0xe>

000002fa <bldc_EnableTimer1A>:
/* -----------------------------------------------------
 * --               Private functions                  --
 * ----------------------------------------------------- */
void bldc_EnableTimer1A(uint16_t timerVal)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 2fa:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 2fc:	f8 94       	cli
	{
		OCR1A = timerVal;
 2fe:	90 93 89 00 	sts	0x0089, r25
 302:	80 93 88 00 	sts	0x0088, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 306:	2f bf       	out	0x3f, r18	; 63
	}
	TIMSK1 |= _BV(OCIE1A);
 308:	ef e6       	ldi	r30, 0x6F	; 111
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	80 81       	ld	r24, Z
 30e:	82 60       	ori	r24, 0x02	; 2
 310:	80 83       	st	Z, r24
 312:	08 95       	ret

00000314 <bldc_EnableTimer1B>:
	TIMSK1 &= ~_BV(OCIE1A);
}

void bldc_EnableTimer1B(uint16_t timerVal)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 314:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 316:	f8 94       	cli
	{
		OCR1B = timerVal;
 318:	90 93 8b 00 	sts	0x008B, r25
 31c:	80 93 8a 00 	sts	0x008A, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 320:	2f bf       	out	0x3f, r18	; 63
	}	
	TIMSK1 |= _BV(OCIE1B);
 322:	ef e6       	ldi	r30, 0x6F	; 111
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	80 81       	ld	r24, Z
 328:	84 60       	ori	r24, 0x04	; 4
 32a:	80 83       	st	Z, r24
 32c:	08 95       	ret

0000032e <bldc_GetTimer1Value>:

uint16_t bldc_GetTimer1Value(void)
{
	uint16_t result;
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 32e:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 330:	f8 94       	cli
	{
		result = TCNT1;
 332:	80 91 84 00 	lds	r24, 0x0084
 336:	90 91 85 00 	lds	r25, 0x0085
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 33a:	2f bf       	out	0x3f, r18	; 63
	}	
	
	return result;
}
 33c:	08 95       	ret

0000033e <BLDC_Init>:
/* -----------------------------------------------------
 * --               Public functions                  --
 * ----------------------------------------------------- */
void BLDC_Init(void)
{
	PORT_BLDC &= ~(_BV(PIN_PHASE_A_SD)|_BV(PIN_PHASE_B_SD)|_BV(PIN_PHASE_C_SD)|_BV(PIN_PHASE_A_IN)|_BV(PIN_PHASE_B_IN)|_BV(PIN_PHASE_C_IN));
 33e:	8b b1       	in	r24, 0x0b	; 11
 340:	88 74       	andi	r24, 0x48	; 72
 342:	8b b9       	out	0x0b, r24	; 11
	DDR_BLDC |= (_BV(DDRBIT_PHASE_A_IN)|_BV(DDRBIT_PHASE_B_IN)|_BV(DDRBIT_PHASE_C_IN)|_BV(DDRBIT_PHASE_A_SD)|_BV(DDRBIT_PHASE_B_SD)|_BV(DDRBIT_PHASE_C_SD));
 344:	8a b1       	in	r24, 0x0a	; 10
 346:	87 6b       	ori	r24, 0xB7	; 183
 348:	8a b9       	out	0x0a, r24	; 10
 34a:	08 95       	ret

0000034c <BLDC_Start>:
}

void BLDC_Start(void)
{
	ICP_Start();
 34c:	d7 de       	rcall	.-594    	; 0xfc <ICP_Start>
	PWM_Start(0);	
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	21 df       	rcall	.-446    	; 0x194 <PWM_Start>
 352:	08 95       	ret

00000354 <BLDC_StateMachine>:
	bldc_State = BLDC_STATE_ALIGN;
	bldc_RampupStep = 0;
}

void BLDC_StateMachine(void)
{
 354:	08 95       	ret

00000356 <bldc_SetCommutation>:
	Wenn nicht, erfolgt kommutierung mit letztem Phasenwinkel.
	Wenn 6 mal (3 Umdrehungen) auf einer Phase kein gültiger Nulldurchgang, erfolgt notstopp
	*/

void bldc_SetCommutation(uint8_t commutationStep)
{
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
	uint8_t ddrByte;
	uint8_t portByte;
	
	ddrByte = DDR_BLDC;
 35a:	ba b1       	in	r27, 0x0a	; 10
	ddrByte &= ~(_BV(DDRBIT_PHASE_A_IN)|_BV(DDRBIT_PHASE_B_IN)|_BV(DDRBIT_PHASE_C_IN));
	ddrByte |= _BV(BLDC_CommutationStates[commutationStep].phaseA_IN_DDR)|
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	fc 01       	movw	r30, r24
 364:	ea 5e       	subi	r30, 0xEA	; 234
 366:	fe 4f       	sbci	r31, 0xFE	; 254
 368:	a0 81       	ld	r26, Z
 36a:	4a 2f       	mov	r20, r26
 36c:	41 70       	andi	r20, 0x01	; 1
 36e:	21 e0       	ldi	r18, 0x01	; 1
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	b9 01       	movw	r22, r18
 374:	02 c0       	rjmp	.+4      	; 0x37a <bldc_SetCommutation+0x24>
 376:	66 0f       	add	r22, r22
 378:	77 1f       	adc	r23, r23
 37a:	4a 95       	dec	r20
 37c:	e2 f7       	brpl	.-8      	; 0x376 <bldc_SetCommutation+0x20>
 37e:	ab 01       	movw	r20, r22
				_BV(BLDC_CommutationStates[commutationStep].phaseB_IN_DDR)|
 380:	a3 fb       	bst	r26, 3
 382:	66 27       	eor	r22, r22
 384:	60 f9       	bld	r22, 0
 386:	e9 01       	movw	r28, r18
 388:	02 c0       	rjmp	.+4      	; 0x38e <bldc_SetCommutation+0x38>
 38a:	cc 0f       	add	r28, r28
 38c:	dd 1f       	adc	r29, r29
 38e:	6a 95       	dec	r22
 390:	e2 f7       	brpl	.-8      	; 0x38a <bldc_SetCommutation+0x34>
 392:	be 01       	movw	r22, r28
	uint8_t ddrByte;
	uint8_t portByte;
	
	ddrByte = DDR_BLDC;
	ddrByte &= ~(_BV(DDRBIT_PHASE_A_IN)|_BV(DDRBIT_PHASE_B_IN)|_BV(DDRBIT_PHASE_C_IN));
	ddrByte |= _BV(BLDC_CommutationStates[commutationStep].phaseA_IN_DDR)|
 394:	64 2b       	or	r22, r20
{
	uint8_t ddrByte;
	uint8_t portByte;
	
	ddrByte = DDR_BLDC;
	ddrByte &= ~(_BV(DDRBIT_PHASE_A_IN)|_BV(DDRBIT_PHASE_B_IN)|_BV(DDRBIT_PHASE_C_IN));
 396:	bd 7c       	andi	r27, 0xCD	; 205
	ddrByte |= _BV(BLDC_CommutationStates[commutationStep].phaseA_IN_DDR)|
 398:	b6 2b       	or	r27, r22
				_BV(BLDC_CommutationStates[commutationStep].phaseB_IN_DDR)|
				_BV(BLDC_CommutationStates[commutationStep].phaseC_IN_DDR);
 39a:	a6 fb       	bst	r26, 6
 39c:	44 27       	eor	r20, r20
 39e:	40 f9       	bld	r20, 0
 3a0:	f9 01       	movw	r30, r18
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <bldc_SetCommutation+0x52>
 3a4:	ee 0f       	add	r30, r30
 3a6:	ff 1f       	adc	r31, r31
 3a8:	4a 95       	dec	r20
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <bldc_SetCommutation+0x4e>
	uint8_t ddrByte;
	uint8_t portByte;
	
	ddrByte = DDR_BLDC;
	ddrByte &= ~(_BV(DDRBIT_PHASE_A_IN)|_BV(DDRBIT_PHASE_B_IN)|_BV(DDRBIT_PHASE_C_IN));
	ddrByte |= _BV(BLDC_CommutationStates[commutationStep].phaseA_IN_DDR)|
 3ac:	be 2b       	or	r27, r30
				_BV(BLDC_CommutationStates[commutationStep].phaseB_IN_DDR)|
				_BV(BLDC_CommutationStates[commutationStep].phaseC_IN_DDR);
	
	portByte = PORT_BLDC;
 3ae:	4b b1       	in	r20, 0x0b	; 11
	portByte &= ~(_BV(PIN_PHASE_A_SD)|_BV(PIN_PHASE_B_SD)|_BV(PIN_PHASE_C_SD)|
					_BV(PIN_PHASE_A_IN)|_BV(PIN_PHASE_B_IN)|_BV(PIN_PHASE_C_IN));
					
	portByte |= _BV(BLDC_CommutationStates[commutationStep].phaseA_SD)|
 3b0:	a2 fb       	bst	r26, 2
 3b2:	66 27       	eor	r22, r22
 3b4:	60 f9       	bld	r22, 0
 3b6:	e9 01       	movw	r28, r18
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <bldc_SetCommutation+0x68>
 3ba:	cc 0f       	add	r28, r28
 3bc:	dd 1f       	adc	r29, r29
 3be:	6a 95       	dec	r22
 3c0:	e2 f7       	brpl	.-8      	; 0x3ba <bldc_SetCommutation+0x64>
 3c2:	be 01       	movw	r22, r28
				_BV(BLDC_CommutationStates[commutationStep].phaseB_SD)|
 3c4:	a5 fb       	bst	r26, 5
 3c6:	ee 27       	eor	r30, r30
 3c8:	e0 f9       	bld	r30, 0
 3ca:	e9 01       	movw	r28, r18
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <bldc_SetCommutation+0x7c>
 3ce:	cc 0f       	add	r28, r28
 3d0:	dd 1f       	adc	r29, r29
 3d2:	ea 95       	dec	r30
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <bldc_SetCommutation+0x78>
	
	portByte = PORT_BLDC;
	portByte &= ~(_BV(PIN_PHASE_A_SD)|_BV(PIN_PHASE_B_SD)|_BV(PIN_PHASE_C_SD)|
					_BV(PIN_PHASE_A_IN)|_BV(PIN_PHASE_B_IN)|_BV(PIN_PHASE_C_IN));
					
	portByte |= _BV(BLDC_CommutationStates[commutationStep].phaseA_SD)|
 3d6:	6c 2b       	or	r22, r28
	ddrByte |= _BV(BLDC_CommutationStates[commutationStep].phaseA_IN_DDR)|
				_BV(BLDC_CommutationStates[commutationStep].phaseB_IN_DDR)|
				_BV(BLDC_CommutationStates[commutationStep].phaseC_IN_DDR);
	
	portByte = PORT_BLDC;
	portByte &= ~(_BV(PIN_PHASE_A_SD)|_BV(PIN_PHASE_B_SD)|_BV(PIN_PHASE_C_SD)|
 3d8:	48 74       	andi	r20, 0x48	; 72
					_BV(PIN_PHASE_A_IN)|_BV(PIN_PHASE_B_IN)|_BV(PIN_PHASE_C_IN));
					
	portByte |= _BV(BLDC_CommutationStates[commutationStep].phaseA_SD)|
 3da:	46 2b       	or	r20, r22
				_BV(BLDC_CommutationStates[commutationStep].phaseB_SD)|
				_BV(BLDC_CommutationStates[commutationStep].phaseC_SD);
 3dc:	fc 01       	movw	r30, r24
 3de:	e9 5e       	subi	r30, 0xE9	; 233
 3e0:	fe 4f       	sbci	r31, 0xFE	; 254
 3e2:	60 81       	ld	r22, Z
 3e4:	61 70       	andi	r22, 0x01	; 1
 3e6:	f9 01       	movw	r30, r18
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <bldc_SetCommutation+0x98>
 3ea:	ee 0f       	add	r30, r30
 3ec:	ff 1f       	adc	r31, r31
 3ee:	6a 95       	dec	r22
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <bldc_SetCommutation+0x94>
 3f2:	bf 01       	movw	r22, r30
	
	portByte = PORT_BLDC;
	portByte &= ~(_BV(PIN_PHASE_A_SD)|_BV(PIN_PHASE_B_SD)|_BV(PIN_PHASE_C_SD)|
					_BV(PIN_PHASE_A_IN)|_BV(PIN_PHASE_B_IN)|_BV(PIN_PHASE_C_IN));
					
	portByte |= _BV(BLDC_CommutationStates[commutationStep].phaseA_SD)|
 3f4:	64 2b       	or	r22, r20
				_BV(BLDC_CommutationStates[commutationStep].phaseB_SD)|
				_BV(BLDC_CommutationStates[commutationStep].phaseC_SD);
				
	portByte |= _BV(BLDC_CommutationStates[commutationStep].phaseA_IN)|
 3f6:	a1 fb       	bst	r26, 1
 3f8:	44 27       	eor	r20, r20
 3fa:	40 f9       	bld	r20, 0
 3fc:	c9 01       	movw	r24, r18
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <bldc_SetCommutation+0xae>
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	4a 95       	dec	r20
 406:	e2 f7       	brpl	.-8      	; 0x400 <bldc_SetCommutation+0xaa>
 408:	ac 01       	movw	r20, r24
 40a:	46 2b       	or	r20, r22
				_BV(BLDC_CommutationStates[commutationStep].phaseB_IN)|
 40c:	a4 fb       	bst	r26, 4
 40e:	88 27       	eor	r24, r24
 410:	80 f9       	bld	r24, 0
 412:	e9 01       	movw	r28, r18
 414:	02 c0       	rjmp	.+4      	; 0x41a <bldc_SetCommutation+0xc4>
 416:	cc 0f       	add	r28, r28
 418:	dd 1f       	adc	r29, r29
 41a:	8a 95       	dec	r24
 41c:	e2 f7       	brpl	.-8      	; 0x416 <bldc_SetCommutation+0xc0>
 41e:	ce 01       	movw	r24, r28
					
	portByte |= _BV(BLDC_CommutationStates[commutationStep].phaseA_SD)|
				_BV(BLDC_CommutationStates[commutationStep].phaseB_SD)|
				_BV(BLDC_CommutationStates[commutationStep].phaseC_SD);
				
	portByte |= _BV(BLDC_CommutationStates[commutationStep].phaseA_IN)|
 420:	84 2b       	or	r24, r20
				_BV(BLDC_CommutationStates[commutationStep].phaseB_IN)|
				_BV(BLDC_CommutationStates[commutationStep].phaseC_IN);
 422:	a7 fb       	bst	r26, 7
 424:	aa 27       	eor	r26, r26
 426:	a0 f9       	bld	r26, 0
 428:	02 c0       	rjmp	.+4      	; 0x42e <bldc_SetCommutation+0xd8>
 42a:	22 0f       	add	r18, r18
 42c:	33 1f       	adc	r19, r19
 42e:	aa 95       	dec	r26
 430:	e2 f7       	brpl	.-8      	; 0x42a <bldc_SetCommutation+0xd4>
					
	portByte |= _BV(BLDC_CommutationStates[commutationStep].phaseA_SD)|
				_BV(BLDC_CommutationStates[commutationStep].phaseB_SD)|
				_BV(BLDC_CommutationStates[commutationStep].phaseC_SD);
				
	portByte |= _BV(BLDC_CommutationStates[commutationStep].phaseA_IN)|
 432:	28 2b       	or	r18, r24
				_BV(BLDC_CommutationStates[commutationStep].phaseB_IN)|
				_BV(BLDC_CommutationStates[commutationStep].phaseC_IN);
	
	PORT_BLDC = portByte;
 434:	2b b9       	out	0x0b, r18	; 11
	DDR_BLDC = ddrByte;
 436:	ba b9       	out	0x0a, r27	; 10
}
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	08 95       	ret

0000043e <bldc_StopMotor>:

void bldc_StopMotor(bool quickstop)
{
	if (true == quickstop)
 43e:	88 23       	and	r24, r24
 440:	19 f0       	breq	.+6      	; 0x448 <bldc_StopMotor+0xa>
	{
		bldc_SetCommutation(BLDC_COMMUTATION_QUICKSTOP);
 442:	87 e0       	ldi	r24, 0x07	; 7
 444:	88 df       	rcall	.-240    	; 0x356 <bldc_SetCommutation>
 446:	02 c0       	rjmp	.+4      	; 0x44c <bldc_StopMotor+0xe>
	}
	else
	{
		bldc_SetCommutation(BLDC_COMMUTATION_OFF);
 448:	86 e0       	ldi	r24, 0x06	; 6
 44a:	85 df       	rcall	.-246    	; 0x356 <bldc_SetCommutation>
	}
	
	bldc_State = BLDC_STATE_STOP;
 44c:	10 92 3c 01 	sts	0x013C, r1
 450:	08 95       	ret

00000452 <SPI_Cmd_Callback>:
}

bool SPI_Cmd_Callback(uint8_t cmd, volatile uint8_t *param, uint8_t paramLen)
{
	
}
 452:	08 95       	ret

00000454 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 454:	1f 92       	push	r1
 456:	0f 92       	push	r0
 458:	0f b6       	in	r0, 0x3f	; 63
 45a:	0f 92       	push	r0
 45c:	11 24       	eor	r1, r1
 45e:	2f 93       	push	r18
 460:	3f 93       	push	r19
 462:	4f 93       	push	r20
 464:	5f 93       	push	r21
 466:	6f 93       	push	r22
 468:	7f 93       	push	r23
 46a:	8f 93       	push	r24
 46c:	9f 93       	push	r25
 46e:	af 93       	push	r26
 470:	bf 93       	push	r27
 472:	cf 93       	push	r28
 474:	df 93       	push	r29
 476:	ef 93       	push	r30
 478:	ff 93       	push	r31
	uint8_t newCommutation;
	uint32_t temp;
	switch (bldc_State)
 47a:	80 91 3c 01 	lds	r24, 0x013C
 47e:	82 30       	cpi	r24, 0x02	; 2
 480:	11 f1       	breq	.+68     	; 0x4c6 <__vector_11+0x72>
 482:	30 f4       	brcc	.+12     	; 0x490 <__vector_11+0x3c>
 484:	88 23       	and	r24, r24
 486:	09 f4       	brne	.+2      	; 0x48a <__vector_11+0x36>
 488:	0c c1       	rjmp	.+536    	; 0x6a2 <__stack+0x1a3>
 48a:	81 30       	cpi	r24, 0x01	; 1
 48c:	41 f0       	breq	.+16     	; 0x49e <__vector_11+0x4a>
 48e:	07 c1       	rjmp	.+526    	; 0x69e <__stack+0x19f>
 490:	83 30       	cpi	r24, 0x03	; 3
 492:	09 f4       	brne	.+2      	; 0x496 <__vector_11+0x42>
 494:	4c c0       	rjmp	.+152    	; 0x52e <__stack+0x2f>
 496:	84 30       	cpi	r24, 0x04	; 4
 498:	09 f4       	brne	.+2      	; 0x49c <__vector_11+0x48>
 49a:	ab c0       	rjmp	.+342    	; 0x5f2 <__stack+0xf3>
 49c:	00 c1       	rjmp	.+512    	; 0x69e <__stack+0x19f>
		/* Nichts zu tun */
		break;
		
		case BLDC_STATE_ALIGN:
			/* Align Timeout rum, in den Ramp Up Modus wechseln */
			bldc_State = BLDC_STATE_RAMP_UP;
 49e:	82 e0       	ldi	r24, 0x02	; 2
 4a0:	80 93 3c 01 	sts	0x013C, r24
			bldc_RampupStep = 0;
 4a4:	10 92 43 01 	sts	0x0143, r1
			bldc_SetCommutation(1);
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	55 df       	rcall	.-342    	; 0x356 <bldc_SetCommutation>
			PWM_SetValue(BLDC_RampupTable[bldc_RampupStep].pwmDuty);
 4ac:	82 e3       	ldi	r24, 0x32	; 50
 4ae:	7b de       	rcall	.-778    	; 0x1a6 <PWM_SetValue>
			bldc_EnableTimer1A(BLDC_RampupTable[bldc_RampupStep].commutationTime);
 4b0:	e0 91 43 01 	lds	r30, 0x0143
 4b4:	f0 e0       	ldi	r31, 0x00	; 0
 4b6:	ee 0f       	add	r30, r30
 4b8:	ff 1f       	adc	r31, r31
 4ba:	e6 5f       	subi	r30, 0xF6	; 246
 4bc:	fe 4f       	sbci	r31, 0xFE	; 254
 4be:	81 81       	ldd	r24, Z+1	; 0x01
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	1b df       	rcall	.-458    	; 0x2fa <bldc_EnableTimer1A>
		break;
 4c4:	ee c0       	rjmp	.+476    	; 0x6a2 <__stack+0x1a3>

		case BLDC_STATE_RAMP_UP:
			/* Ein Ramp-Up increment ist abgelaufen, Kommutierung weiterschalten */
			if (++bldc_RampupStep == (RAMPUP_STEPS - 1))
 4c6:	e0 91 43 01 	lds	r30, 0x0143
 4ca:	ef 5f       	subi	r30, 0xFF	; 255
 4cc:	e0 93 43 01 	sts	0x0143, r30
 4d0:	e5 30       	cpi	r30, 0x05	; 5
 4d2:	19 f4       	brne	.+6      	; 0x4da <__vector_11+0x86>
			{
				bldc_State = BLDC_STATE_LAST_RAMP_UP;
 4d4:	83 e0       	ldi	r24, 0x03	; 3
 4d6:	80 93 3c 01 	sts	0x013C, r24
			}

			newCommutation = bldc_CommutationStep++;
 4da:	c0 91 42 01 	lds	r28, 0x0142
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	8c 0f       	add	r24, r28
 4e2:	80 93 42 01 	sts	0x0142, r24
			newCommutation %= 6;
			
			PWM_SetValue(BLDC_RampupTable[bldc_RampupStep].pwmDuty);
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	ee 0f       	add	r30, r30
 4ea:	ff 1f       	adc	r31, r31
 4ec:	e6 5f       	subi	r30, 0xF6	; 246
 4ee:	fe 4f       	sbci	r31, 0xFE	; 254
 4f0:	80 81       	ld	r24, Z
 4f2:	59 de       	rcall	.-846    	; 0x1a6 <PWM_SetValue>
			{
				bldc_State = BLDC_STATE_LAST_RAMP_UP;
			}

			newCommutation = bldc_CommutationStep++;
			newCommutation %= 6;
 4f4:	8b ea       	ldi	r24, 0xAB	; 171
 4f6:	c8 9f       	mul	r28, r24
 4f8:	81 2d       	mov	r24, r1
 4fa:	11 24       	eor	r1, r1
 4fc:	86 95       	lsr	r24
 4fe:	86 95       	lsr	r24
 500:	98 2f       	mov	r25, r24
 502:	99 0f       	add	r25, r25
 504:	89 0f       	add	r24, r25
 506:	88 0f       	add	r24, r24
			
			PWM_SetValue(BLDC_RampupTable[bldc_RampupStep].pwmDuty);
			bldc_SetCommutation(newCommutation);
 508:	c8 1b       	sub	r28, r24
 50a:	8c 2f       	mov	r24, r28
 50c:	24 df       	rcall	.-440    	; 0x356 <bldc_SetCommutation>
			bldc_tCommutation = bldc_GetTimer1Value();
 50e:	0f df       	rcall	.-482    	; 0x32e <bldc_GetTimer1Value>
 510:	90 93 09 01 	sts	0x0109, r25
 514:	80 93 08 01 	sts	0x0108, r24
			bldc_EnableTimer1A(BLDC_RampupTable[bldc_RampupStep].commutationTime);
 518:	e0 91 43 01 	lds	r30, 0x0143
 51c:	f0 e0       	ldi	r31, 0x00	; 0
 51e:	ee 0f       	add	r30, r30
 520:	ff 1f       	adc	r31, r31
 522:	e6 5f       	subi	r30, 0xF6	; 246
 524:	fe 4f       	sbci	r31, 0xFE	; 254
 526:	81 81       	ldd	r24, Z+1	; 0x01
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	e7 de       	rcall	.-562    	; 0x2fa <bldc_EnableTimer1A>
		break;
 52c:	ba c0       	rjmp	.+372    	; 0x6a2 <__stack+0x1a3>
			   Mit letzten Einstellungen weiter kommutieren.
			   Wenn nicht innerhalb von 3 Umdrehungen BEMF erkannt wird,
			   erfolgt Stop 
			 */

			newCommutation = bldc_CommutationStep++;
 52e:	c0 91 42 01 	lds	r28, 0x0142
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	8c 0f       	add	r24, r28
 536:	80 93 42 01 	sts	0x0142, r24
			newCommutation %= 6;
			
			PWM_SetValue(BLDC_RampupTable[bldc_RampupStep].pwmDuty);
 53a:	e0 91 43 01 	lds	r30, 0x0143
 53e:	f0 e0       	ldi	r31, 0x00	; 0
 540:	ee 0f       	add	r30, r30
 542:	ff 1f       	adc	r31, r31
 544:	e6 5f       	subi	r30, 0xF6	; 246
 546:	fe 4f       	sbci	r31, 0xFE	; 254
 548:	80 81       	ld	r24, Z
 54a:	2d de       	rcall	.-934    	; 0x1a6 <PWM_SetValue>
			   Wenn nicht innerhalb von 3 Umdrehungen BEMF erkannt wird,
			   erfolgt Stop 
			 */

			newCommutation = bldc_CommutationStep++;
			newCommutation %= 6;
 54c:	8b ea       	ldi	r24, 0xAB	; 171
 54e:	c8 9f       	mul	r28, r24
 550:	81 2d       	mov	r24, r1
 552:	11 24       	eor	r1, r1
 554:	86 95       	lsr	r24
 556:	86 95       	lsr	r24
 558:	98 2f       	mov	r25, r24
 55a:	99 0f       	add	r25, r25
 55c:	89 0f       	add	r24, r25
 55e:	88 0f       	add	r24, r24
			
			PWM_SetValue(BLDC_RampupTable[bldc_RampupStep].pwmDuty);
			bldc_SetCommutation(newCommutation);
 560:	c8 1b       	sub	r28, r24
 562:	8c 2f       	mov	r24, r28
 564:	f8 de       	rcall	.-528    	; 0x356 <bldc_SetCommutation>
			bldc_tCommutation = bldc_GetTimer1Value();
 566:	e3 de       	rcall	.-570    	; 0x32e <bldc_GetTimer1Value>
 568:	ec 01       	movw	r28, r24
 56a:	90 93 09 01 	sts	0x0109, r25
 56e:	80 93 08 01 	sts	0x0108, r24
			bldc_EnableTimer1A(BLDC_RampupTable[bldc_RampupStep].commutationTime);
 572:	e0 91 43 01 	lds	r30, 0x0143
 576:	f0 e0       	ldi	r31, 0x00	; 0
 578:	ee 0f       	add	r30, r30
 57a:	ff 1f       	adc	r31, r31
 57c:	e6 5f       	subi	r30, 0xF6	; 246
 57e:	fe 4f       	sbci	r31, 0xFE	; 254
 580:	81 81       	ldd	r24, Z+1	; 0x01
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	ba de       	rcall	.-652    	; 0x2fa <bldc_EnableTimer1A>

			/* Fenster zum erwarteten Nulldurchgang berechnen:
			   Fenster = Letzter Nulldurchgang+-10%?? 
			*/		
			temp = bldc_zeroCrossTime * 100;
 586:	80 91 04 01 	lds	r24, 0x0104
 58a:	90 91 05 01 	lds	r25, 0x0105
 58e:	24 e6       	ldi	r18, 0x64	; 100
 590:	28 9f       	mul	r18, r24
 592:	b0 01       	movw	r22, r0
 594:	29 9f       	mul	r18, r25
 596:	70 0d       	add	r23, r0
 598:	11 24       	eor	r1, r1
 59a:	cb 01       	movw	r24, r22
 59c:	a0 e0       	ldi	r26, 0x00	; 0
 59e:	b0 e0       	ldi	r27, 0x00	; 0
			temp += 500;
 5a0:	bc 01       	movw	r22, r24
 5a2:	cd 01       	movw	r24, r26
 5a4:	6c 50       	subi	r22, 0x0C	; 12
 5a6:	7e 4f       	sbci	r23, 0xFE	; 254
 5a8:	8f 4f       	sbci	r24, 0xFF	; 255
 5aa:	9f 4f       	sbci	r25, 0xFF	; 255
			temp /= 1000;
 5ac:	28 ee       	ldi	r18, 0xE8	; 232
 5ae:	33 e0       	ldi	r19, 0x03	; 3
 5b0:	40 e0       	ldi	r20, 0x00	; 0
 5b2:	50 e0       	ldi	r21, 0x00	; 0
 5b4:	3e d1       	rcall	.+636    	; 0x832 <__udivmodsi4>
			bldc_tZeroCrossWindowStart = bldc_tCommutation + bldc_zeroCrossTime - temp;
 5b6:	80 91 04 01 	lds	r24, 0x0104
 5ba:	90 91 05 01 	lds	r25, 0x0105
 5be:	82 1b       	sub	r24, r18
 5c0:	93 0b       	sbc	r25, r19
 5c2:	c8 0f       	add	r28, r24
 5c4:	d9 1f       	adc	r29, r25
 5c6:	d0 93 03 01 	sts	0x0103, r29
 5ca:	c0 93 02 01 	sts	0x0102, r28
			bldc_tZeroCrossWindowStop = bldc_tZeroCrossWindowStart + (temp * 2);
 5ce:	80 91 02 01 	lds	r24, 0x0102
 5d2:	90 91 03 01 	lds	r25, 0x0103
 5d6:	22 0f       	add	r18, r18
 5d8:	33 1f       	adc	r19, r19
 5da:	28 0f       	add	r18, r24
 5dc:	39 1f       	adc	r19, r25
 5de:	30 93 01 01 	sts	0x0101, r19
 5e2:	20 93 00 01 	sts	0x0100, r18
			bldc_EnableTimer1B(bldc_tZeroCrossWindowStart);
 5e6:	80 91 02 01 	lds	r24, 0x0102
 5ea:	90 91 03 01 	lds	r25, 0x0103
 5ee:	92 de       	rcall	.-732    	; 0x314 <bldc_EnableTimer1B>
		break;
 5f0:	58 c0       	rjmp	.+176    	; 0x6a2 <__stack+0x1a3>

		case BLDC_STATE_RUNNING:
			newCommutation = bldc_CommutationStep++;
 5f2:	c0 91 42 01 	lds	r28, 0x0142
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	8c 0f       	add	r24, r28
 5fa:	80 93 42 01 	sts	0x0142, r24
			newCommutation %= 6;
			
			PWM_SetValue(bldc_PWMValue);
 5fe:	80 e0       	ldi	r24, 0x00	; 0
 600:	d2 dd       	rcall	.-1116   	; 0x1a6 <PWM_SetValue>
			bldc_EnableTimer1B(bldc_tZeroCrossWindowStart);
		break;

		case BLDC_STATE_RUNNING:
			newCommutation = bldc_CommutationStep++;
			newCommutation %= 6;
 602:	8b ea       	ldi	r24, 0xAB	; 171
 604:	c8 9f       	mul	r28, r24
 606:	81 2d       	mov	r24, r1
 608:	11 24       	eor	r1, r1
 60a:	86 95       	lsr	r24
 60c:	86 95       	lsr	r24
 60e:	98 2f       	mov	r25, r24
 610:	99 0f       	add	r25, r25
 612:	89 0f       	add	r24, r25
 614:	88 0f       	add	r24, r24
			
			PWM_SetValue(bldc_PWMValue);
			bldc_SetCommutation(newCommutation);
 616:	c8 1b       	sub	r28, r24
 618:	8c 2f       	mov	r24, r28
 61a:	9d de       	rcall	.-710    	; 0x356 <bldc_SetCommutation>
			bldc_tCommutation = bldc_GetTimer1Value();
 61c:	88 de       	rcall	.-752    	; 0x32e <bldc_GetTimer1Value>
 61e:	ec 01       	movw	r28, r24
 620:	90 93 09 01 	sts	0x0109, r25
 624:	80 93 08 01 	sts	0x0108, r24
			bldc_EnableTimer1A(bldc_tCommutationDelay);
 628:	80 91 3d 01 	lds	r24, 0x013D
 62c:	90 91 3e 01 	lds	r25, 0x013E
 630:	64 de       	rcall	.-824    	; 0x2fa <bldc_EnableTimer1A>

			/* Fenster zum erwarteten Nulldurchgang berechnen:
			   Fenster = Letzter Nulldurchgang+-10%?? 
			*/		
			temp = bldc_zeroCrossTime * 100;
 632:	80 91 04 01 	lds	r24, 0x0104
 636:	90 91 05 01 	lds	r25, 0x0105
 63a:	24 e6       	ldi	r18, 0x64	; 100
 63c:	28 9f       	mul	r18, r24
 63e:	b0 01       	movw	r22, r0
 640:	29 9f       	mul	r18, r25
 642:	70 0d       	add	r23, r0
 644:	11 24       	eor	r1, r1
 646:	cb 01       	movw	r24, r22
 648:	a0 e0       	ldi	r26, 0x00	; 0
 64a:	b0 e0       	ldi	r27, 0x00	; 0
			temp += 500;
 64c:	bc 01       	movw	r22, r24
 64e:	cd 01       	movw	r24, r26
 650:	6c 50       	subi	r22, 0x0C	; 12
 652:	7e 4f       	sbci	r23, 0xFE	; 254
 654:	8f 4f       	sbci	r24, 0xFF	; 255
 656:	9f 4f       	sbci	r25, 0xFF	; 255
			temp /= 1000;
 658:	28 ee       	ldi	r18, 0xE8	; 232
 65a:	33 e0       	ldi	r19, 0x03	; 3
 65c:	40 e0       	ldi	r20, 0x00	; 0
 65e:	50 e0       	ldi	r21, 0x00	; 0
 660:	e8 d0       	rcall	.+464    	; 0x832 <__udivmodsi4>
			bldc_tZeroCrossWindowStart = bldc_tCommutation + bldc_zeroCrossTime - temp;
 662:	80 91 04 01 	lds	r24, 0x0104
 666:	90 91 05 01 	lds	r25, 0x0105
 66a:	82 1b       	sub	r24, r18
 66c:	93 0b       	sbc	r25, r19
 66e:	c8 0f       	add	r28, r24
 670:	d9 1f       	adc	r29, r25
 672:	d0 93 03 01 	sts	0x0103, r29
 676:	c0 93 02 01 	sts	0x0102, r28
			bldc_tZeroCrossWindowStop = bldc_tZeroCrossWindowStart + (temp * 2);
 67a:	80 91 02 01 	lds	r24, 0x0102
 67e:	90 91 03 01 	lds	r25, 0x0103
 682:	22 0f       	add	r18, r18
 684:	33 1f       	adc	r19, r19
 686:	28 0f       	add	r18, r24
 688:	39 1f       	adc	r19, r25
 68a:	30 93 01 01 	sts	0x0101, r19
 68e:	20 93 00 01 	sts	0x0100, r18
			bldc_EnableTimer1B(bldc_tZeroCrossWindowStart);
 692:	80 91 02 01 	lds	r24, 0x0102
 696:	90 91 03 01 	lds	r25, 0x0103
 69a:	3c de       	rcall	.-904    	; 0x314 <bldc_EnableTimer1B>
		break;
 69c:	02 c0       	rjmp	.+4      	; 0x6a2 <__stack+0x1a3>

		default:
			bldc_StopMotor(true);
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	ce de       	rcall	.-612    	; 0x43e <bldc_StopMotor>
			/* TODO: Fehler setzen */
		break;
	}	
}
 6a2:	ff 91       	pop	r31
 6a4:	ef 91       	pop	r30
 6a6:	df 91       	pop	r29
 6a8:	cf 91       	pop	r28
 6aa:	bf 91       	pop	r27
 6ac:	af 91       	pop	r26
 6ae:	9f 91       	pop	r25
 6b0:	8f 91       	pop	r24
 6b2:	7f 91       	pop	r23
 6b4:	6f 91       	pop	r22
 6b6:	5f 91       	pop	r21
 6b8:	4f 91       	pop	r20
 6ba:	3f 91       	pop	r19
 6bc:	2f 91       	pop	r18
 6be:	0f 90       	pop	r0
 6c0:	0f be       	out	0x3f, r0	; 63
 6c2:	0f 90       	pop	r0
 6c4:	1f 90       	pop	r1
 6c6:	18 95       	reti

000006c8 <__vector_12>:

ISR(TIMER1_COMPB_vect)
{
 6c8:	1f 92       	push	r1
 6ca:	0f 92       	push	r0
 6cc:	0f b6       	in	r0, 0x3f	; 63
 6ce:	0f 92       	push	r0
 6d0:	11 24       	eor	r1, r1
 6d2:	2f 93       	push	r18
 6d4:	3f 93       	push	r19
 6d6:	4f 93       	push	r20
 6d8:	5f 93       	push	r21
 6da:	6f 93       	push	r22
 6dc:	7f 93       	push	r23
 6de:	8f 93       	push	r24
 6e0:	9f 93       	push	r25
 6e2:	af 93       	push	r26
 6e4:	bf 93       	push	r27
 6e6:	ef 93       	push	r30
 6e8:	ff 93       	push	r31
	switch (bldc_ZeroCrossDetectionState)
 6ea:	80 91 3b 01 	lds	r24, 0x013B
 6ee:	88 23       	and	r24, r24
 6f0:	19 f0       	breq	.+6      	; 0x6f8 <__vector_12+0x30>
 6f2:	81 30       	cpi	r24, 0x01	; 1
 6f4:	b9 f0       	breq	.+46     	; 0x724 <__vector_12+0x5c>
 6f6:	30 c0       	rjmp	.+96     	; 0x758 <__vector_12+0x90>
	{
		case BLDC_ZCROSS_WINDOWCLOSED:
			ADC_Disable();
 6f8:	e6 dc       	rcall	.-1588   	; 0xc6 <ADC_Disable>
			ACP_SelectInput(BLDC_CommutationStates[bldc_CommutationStep].ComparatorInput);
 6fa:	e0 91 42 01 	lds	r30, 0x0142
 6fe:	f0 e0       	ldi	r31, 0x00	; 0
 700:	ee 0f       	add	r30, r30
 702:	ff 1f       	adc	r31, r31
 704:	e9 5e       	subi	r30, 0xE9	; 233
 706:	fe 4f       	sbci	r31, 0xFE	; 254
 708:	80 81       	ld	r24, Z
 70a:	86 95       	lsr	r24
 70c:	87 70       	andi	r24, 0x07	; 7
 70e:	bf dc       	rcall	.-1666   	; 0x8e <ACP_SelectInput>
			ACP_Enable();
 710:	b6 dc       	rcall	.-1684   	; 0x7e <ACP_Enable>
			bldc_ZeroCrossDetectionState = BLDC_ZCROSS_WINDOWOPEN;
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	80 93 3b 01 	sts	0x013B, r24
			bldc_EnableTimer1B(bldc_tZeroCrossWindowStop);
 718:	80 91 00 01 	lds	r24, 0x0100
 71c:	90 91 01 01 	lds	r25, 0x0101
 720:	f9 dd       	rcall	.-1038   	; 0x314 <bldc_EnableTimer1B>
		break;
 722:	1a c0       	rjmp	.+52     	; 0x758 <__vector_12+0x90>
		
		case BLDC_ZCROSS_WINDOWOPEN:
			ACP_Disable();
 724:	b0 dc       	rcall	.-1696   	; 0x86 <ACP_Disable>
			ADC_Enable();
 726:	c9 dc       	rcall	.-1646   	; 0xba <ADC_Enable>
	TIMSK1 |= _BV(OCIE1B);
}

void bldc_DisableTimer1B(void)
{
	TIMSK1 &= ~_BV(OCIE1B);	
 728:	ef e6       	ldi	r30, 0x6F	; 111
 72a:	f0 e0       	ldi	r31, 0x00	; 0
 72c:	80 81       	ld	r24, Z
 72e:	8b 7f       	andi	r24, 0xFB	; 251
 730:	80 83       	st	Z, r24
		
		case BLDC_ZCROSS_WINDOWOPEN:
			ACP_Disable();
			ADC_Enable();
			bldc_DisableTimer1B();
			bldc_ZeroCrossDetectionState = BLDC_ZCROSS_WINDOWCLOSED;
 732:	10 92 3b 01 	sts	0x013B, r1
			bldc_FailedCommutations[BLDC_CommutationStates[bldc_CommutationStep].BEMFPhase]++; 
 736:	e0 91 42 01 	lds	r30, 0x0142
 73a:	f0 e0       	ldi	r31, 0x00	; 0
 73c:	ee 0f       	add	r30, r30
 73e:	ff 1f       	adc	r31, r31
 740:	e9 5e       	subi	r30, 0xE9	; 233
 742:	fe 4f       	sbci	r31, 0xFE	; 254
 744:	e0 81       	ld	r30, Z
 746:	e2 95       	swap	r30
 748:	ef 70       	andi	r30, 0x0F	; 15
 74a:	e3 70       	andi	r30, 0x03	; 3
 74c:	f0 e0       	ldi	r31, 0x00	; 0
 74e:	e1 5c       	subi	r30, 0xC1	; 193
 750:	fe 4f       	sbci	r31, 0xFE	; 254
 752:	80 81       	ld	r24, Z
 754:	8f 5f       	subi	r24, 0xFF	; 255
 756:	80 83       	st	Z, r24
		break;
		
		default:
		break;
	}
}
 758:	ff 91       	pop	r31
 75a:	ef 91       	pop	r30
 75c:	bf 91       	pop	r27
 75e:	af 91       	pop	r26
 760:	9f 91       	pop	r25
 762:	8f 91       	pop	r24
 764:	7f 91       	pop	r23
 766:	6f 91       	pop	r22
 768:	5f 91       	pop	r21
 76a:	4f 91       	pop	r20
 76c:	3f 91       	pop	r19
 76e:	2f 91       	pop	r18
 770:	0f 90       	pop	r0
 772:	0f be       	out	0x3f, r0	; 63
 774:	0f 90       	pop	r0
 776:	1f 90       	pop	r1
 778:	18 95       	reti

0000077a <__vector_23>:

ISR(ANALOG_COMP_vect)
{
 77a:	1f 92       	push	r1
 77c:	0f 92       	push	r0
 77e:	0f b6       	in	r0, 0x3f	; 63
 780:	0f 92       	push	r0
 782:	11 24       	eor	r1, r1
 784:	2f 93       	push	r18
 786:	3f 93       	push	r19
 788:	4f 93       	push	r20
 78a:	5f 93       	push	r21
 78c:	6f 93       	push	r22
 78e:	7f 93       	push	r23
 790:	8f 93       	push	r24
 792:	9f 93       	push	r25
 794:	af 93       	push	r26
 796:	bf 93       	push	r27
 798:	ef 93       	push	r30
 79a:	ff 93       	push	r31
	if ((BLDC_STATE_LAST_RAMP_UP == bldc_State) || 
 79c:	80 91 3c 01 	lds	r24, 0x013C
 7a0:	83 50       	subi	r24, 0x03	; 3
 7a2:	82 30       	cpi	r24, 0x02	; 2
 7a4:	a8 f5       	brcc	.+106    	; 0x810 <__vector_23+0x96>
		 * Berechnung CommutationDelay: tDelay = tCommutation + (tZeroCross * 2)
		 * tDelay = Zeit von der aktuellen Kommutierung bis zur nächsten Kommutierung
		 * tZeroCross = Zeit vom der aktuellen Kommutierung bis zum aktuellen Nulldurchgang
		 * tCommutation = Zeitpunkt der aktuellen Kommutierung
		*/
		bldc_tZeroCross = bldc_GetTimer1Value();
 7a6:	c3 dd       	rcall	.-1146   	; 0x32e <bldc_GetTimer1Value>
 7a8:	90 93 07 01 	sts	0x0107, r25
 7ac:	80 93 06 01 	sts	0x0106, r24
	TIMSK1 |= _BV(OCIE1B);
}

void bldc_DisableTimer1B(void)
{
	TIMSK1 &= ~_BV(OCIE1B);	
 7b0:	ef e6       	ldi	r30, 0x6F	; 111
 7b2:	f0 e0       	ldi	r31, 0x00	; 0
 7b4:	80 81       	ld	r24, Z
 7b6:	8b 7f       	andi	r24, 0xFB	; 251
 7b8:	80 83       	st	Z, r24
		 * tZeroCross = Zeit vom der aktuellen Kommutierung bis zum aktuellen Nulldurchgang
		 * tCommutation = Zeitpunkt der aktuellen Kommutierung
		*/
		bldc_tZeroCross = bldc_GetTimer1Value();
		bldc_DisableTimer1B();
		bldc_zeroCrossTime = bldc_tZeroCross - bldc_tCommutation;
 7ba:	80 91 06 01 	lds	r24, 0x0106
 7be:	90 91 07 01 	lds	r25, 0x0107
 7c2:	20 91 08 01 	lds	r18, 0x0108
 7c6:	30 91 09 01 	lds	r19, 0x0109
 7ca:	82 1b       	sub	r24, r18
 7cc:	93 0b       	sbc	r25, r19
 7ce:	90 93 05 01 	sts	0x0105, r25
 7d2:	80 93 04 01 	sts	0x0104, r24
		bldc_tCommutationDelay = bldc_tZeroCross + bldc_zeroCrossTime;		
 7d6:	80 91 06 01 	lds	r24, 0x0106
 7da:	90 91 07 01 	lds	r25, 0x0107
 7de:	20 91 04 01 	lds	r18, 0x0104
 7e2:	30 91 05 01 	lds	r19, 0x0105
 7e6:	82 0f       	add	r24, r18
 7e8:	93 1f       	adc	r25, r19
 7ea:	90 93 3e 01 	sts	0x013E, r25
 7ee:	80 93 3d 01 	sts	0x013D, r24
		bldc_FailedCommutations[BLDC_CommutationStates[bldc_CommutationStep].BEMFPhase] = 0;
 7f2:	e0 91 42 01 	lds	r30, 0x0142
 7f6:	f0 e0       	ldi	r31, 0x00	; 0
 7f8:	ee 0f       	add	r30, r30
 7fa:	ff 1f       	adc	r31, r31
 7fc:	e9 5e       	subi	r30, 0xE9	; 233
 7fe:	fe 4f       	sbci	r31, 0xFE	; 254
 800:	e0 81       	ld	r30, Z
 802:	e2 95       	swap	r30
 804:	ef 70       	andi	r30, 0x0F	; 15
 806:	e3 70       	andi	r30, 0x03	; 3
 808:	f0 e0       	ldi	r31, 0x00	; 0
 80a:	e1 5c       	subi	r30, 0xC1	; 193
 80c:	fe 4f       	sbci	r31, 0xFE	; 254
 80e:	10 82       	st	Z, r1
	}
 810:	ff 91       	pop	r31
 812:	ef 91       	pop	r30
 814:	bf 91       	pop	r27
 816:	af 91       	pop	r26
 818:	9f 91       	pop	r25
 81a:	8f 91       	pop	r24
 81c:	7f 91       	pop	r23
 81e:	6f 91       	pop	r22
 820:	5f 91       	pop	r21
 822:	4f 91       	pop	r20
 824:	3f 91       	pop	r19
 826:	2f 91       	pop	r18
 828:	0f 90       	pop	r0
 82a:	0f be       	out	0x3f, r0	; 63
 82c:	0f 90       	pop	r0
 82e:	1f 90       	pop	r1
 830:	18 95       	reti

00000832 <__udivmodsi4>:
 832:	a1 e2       	ldi	r26, 0x21	; 33
 834:	1a 2e       	mov	r1, r26
 836:	aa 1b       	sub	r26, r26
 838:	bb 1b       	sub	r27, r27
 83a:	fd 01       	movw	r30, r26
 83c:	0d c0       	rjmp	.+26     	; 0x858 <__udivmodsi4_ep>

0000083e <__udivmodsi4_loop>:
 83e:	aa 1f       	adc	r26, r26
 840:	bb 1f       	adc	r27, r27
 842:	ee 1f       	adc	r30, r30
 844:	ff 1f       	adc	r31, r31
 846:	a2 17       	cp	r26, r18
 848:	b3 07       	cpc	r27, r19
 84a:	e4 07       	cpc	r30, r20
 84c:	f5 07       	cpc	r31, r21
 84e:	20 f0       	brcs	.+8      	; 0x858 <__udivmodsi4_ep>
 850:	a2 1b       	sub	r26, r18
 852:	b3 0b       	sbc	r27, r19
 854:	e4 0b       	sbc	r30, r20
 856:	f5 0b       	sbc	r31, r21

00000858 <__udivmodsi4_ep>:
 858:	66 1f       	adc	r22, r22
 85a:	77 1f       	adc	r23, r23
 85c:	88 1f       	adc	r24, r24
 85e:	99 1f       	adc	r25, r25
 860:	1a 94       	dec	r1
 862:	69 f7       	brne	.-38     	; 0x83e <__udivmodsi4_loop>
 864:	60 95       	com	r22
 866:	70 95       	com	r23
 868:	80 95       	com	r24
 86a:	90 95       	com	r25
 86c:	9b 01       	movw	r18, r22
 86e:	ac 01       	movw	r20, r24
 870:	bd 01       	movw	r22, r26
 872:	cf 01       	movw	r24, r30
 874:	08 95       	ret

00000876 <_exit>:
 876:	f8 94       	cli

00000878 <__stop_program>:
 878:	ff cf       	rjmp	.-2      	; 0x878 <__stop_program>
